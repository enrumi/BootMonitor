name: Build iOS App\n\n# Запускать при пуше в ветку main и при создании pull request в main\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    name: Сборка iOS приложения\n    runs-on: macos-latest # Используем последнюю macOS, так как она включает Xcode 15+\n\n    steps:\n    # Шаг 1: Проверка кода из репозитория\n    - name: Checkout кода\n      uses: actions/checkout@v4\n\n    # Шаг 2: Установка необходимых утилит\n    - name: Установка утилит\n      run: |\n        brew install xcbeautify\n\n    # Шаг 3: Установка сертификата и provisioning profile из GitHub Secrets\n    - name: Установка сертификата подписи\n      env:\n        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }} # Base64 encoded p12 файл сертификата\n        CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}     # Пароль от p12 файла\n        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }} # Base64 encoded provisioning profile\n        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} # Пароль для временной keychain (может быть случайным)\n      run: |\n        # Создание временной keychain\n        security create-keychain -p \"$KEYCHAIN_PASSWORD\" build.keychain\n        security default-keychain -s build.keychain\n        security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" build.keychain\n        security set-keychain-settings -lut 21600 build.keychain\n        \n        # Импорт сертификата в keychain\n        echo -n \"$CERTIFICATE_P12\" | base64 --decode -o certificate.p12\n        security import certificate.p12 -k build.keychain -P \"$CERT_PASSWORD\" -A\n        \n        # Установка настроек keychain\n        security set-key-partition-list -S apple-tool:,apple: -s -k \"$KEYCHAIN_PASSWORD\" build.keychain\n        \n        # Импорт provisioning profile\n        mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\n        echo -n \"$PROVISIONING_PROFILE\" | base64 --decode -o ~/Library/MobileDevice/Provisioning\\ Profiles/profile.mobileprovision\n\n    # Шаг 4: Определение имени проекта и схемы\n    - name: Определение параметров проекта\n      run: |\n        # Поиск .xcodeproj файла\n        PROJECT_FILE=$(find . -d 1 -name \"*.xcodeproj\" | head -n 1)\n        if [ -z \"$PROJECT_FILE\" ]; then\n          echo \"Xcode project not found\"\n          exit 1\n        fi\n        PROJECT_NAME=$(basename \"$PROJECT_FILE\" .xcodeproj)\n        echo \"PROJECT_NAME=$PROJECT_NAME\" >> $GITHUB_ENV\n        \n        # Поиск схемы (если явно не указана)\n        echo \"SCHEME_NAME=$PROJECT_NAME\" >> $GITHUB_ENV\n\n    # Шаг 5: Сборка и архивирование приложения\n    - name: Сборка и архивирование приложения\n      env:\n        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} # Team ID от Apple Developer Account\n      run: |\n        # Очистка_derived data (по желанию)\n        rm -rf ~/Library/Developer/Xcode/DerivedData\n        \n        # Создание архива\n        xcodebuild archive \\\n          -project \"$PROJECT_NAME.xcodeproj\" \\\n          -scheme \"$SCHEME_NAME\" \\\n          -archivePath \"$PROJECT_NAME.xcarchive\" \\\n          -sdk iphoneos \\\n          -destination 'generic/platform=iOS' \\\n          -derivedDataPath derived_data \\\n          CODE_SIGN_STYLE=Manual \\\n          DEVELOPMENT_TEAM=\"$APPLE_TEAM_ID\" \\\n          CODE_SIGN_IDENTITY=\"iPhone Distribution\" \\\n          PROVISIONING_PROFILE_SPECIFIER=\"\" \\\n          | xcbeautify\n        \n        # Проверка, что архив создан\n        if [ ! -d \"$PROJECT_NAME.xcarchive\" ]; then\n          echo \"Archive not created\"\n          exit 1\n        fi\n\n    # Шаг 6: Экспорт .ipa файла\n    - name: Экспорт IPA файла\n      env:\n        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} # Team ID от Apple Developer Account\n      run: |\n        # Создание exportOptions.plist файла\n        cat > exportOptions.plist <<EOF\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n        <plist version=\"1.0\">\n        <dict>\n            <key>method</key>\n            <string>app-store</string>\n            <key>teamID</key>\n            <string>$APPLE_TEAM_ID</string>\n            <key>compileBitcode</key>\n            <false/>\n            <key>thinning</key>\n            <string>&lt;none&gt;</string>\n        </dict>\n        </plist>\n        EOF\n        \n        # Экспорт IPA\n        xcodebuild -exportArchive \\\n          -archivePath \"$PROJECT_NAME.xcarchive\" \\\n          -exportPath . \\\n          -exportOptionsPlist exportOptions.plist \\\n          | xcbeautify\n        \n        # Проверка, что IPA создан\n        if [ ! -f \"$PROJECT_NAME.ipa\" ]; then\n          echo \"IPA file not created\"\n          exit 1\n        fi\n\n    # Шаг 7: Сохранение артефактов\n    - name: Сохранение артефактов\n      uses: actions/upload-artifact@v4\n      with:\n        name: iOS-App-Build\n        path: |\n          *.ipa\n          *.xcarchive\n        if-no-files-found: error