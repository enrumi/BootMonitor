name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Также можно запускать вручную
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Сборка iOS приложения
    runs-on: macos-latest

    steps:
    # Шаг 1: Проверка кода из репозитория
    - name: Checkout кода
      uses: actions/checkout@v4

    # Шаг 2: Установка необходимых утилит
    - name: Установка утилит
      run: |
        brew install xcbeautify jq

    # Шаг 3: Установка сертификата и provisioning profile из GitHub Secrets
    - name: Установка сертификата подписи
      env:
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -lut 21600 build.keychain

        echo -n "$CERTIFICATE_P12" | base64 --decode -o certificate.p12
        security import certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A

        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo -n "$PROVISIONING_PROFILE" | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

    # Шаг 4: Определение имени проекта и схемы
    - name: Определение параметров проекта
      run: |
        PROJECT_FILE=$(find . -d 1 -name "*.xcodeproj" | head -n 1)
        if [ -z "$PROJECT_FILE" ]; then
          echo "Xcode project not found"
          exit 1
        fi
        PROJECT_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

        SCHEME_NAME=$(xcodebuild -project "$PROJECT_FILE" -list -json | jq -r '.project.schemes[0]')
        echo "SCHEME_NAME=$SCHEME_NAME" >> $GITHUB_ENV

    # Шаг 5: Сборка и архивирование приложения
    - name: Сборка и архивирование приложения
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        rm -rf ~/Library/Developer/Xcode/DerivedData

        xcodebuild archive \
          -project "$PROJECT_NAME.xcodeproj" \
          -scheme "$SCHEME_NAME" \
          -configuration Release \
          -archivePath "$PROJECT_NAME.xcarchive" \
          -sdk iphoneos \
          -destination 'generic/platform=iOS' \
          -derivedDataPath derived_data \
          CODE_SIGN_STYLE=Manual \
          DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          | xcbeautify

        if [ ! -d "$PROJECT_NAME.xcarchive" ]; then
          echo "Archive not created"
          exit 1
        fi

    # Шаг 6: Экспорт .ipa файла
    - name: Экспорт IPA файла
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        cat > exportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>compileBitcode</key>
            <false/>
            <key>thinning</key>
            <string><none></string>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath "$PROJECT_NAME.xcarchive" \
          -exportPath . \
          -exportOptionsPlist exportOptions.plist \
          | xcbeautify

        if [ ! -f "$PROJECT_NAME.ipa" ]; then
          echo "IPA file not created"
          exit 1
        fi

    # Шаг 7: Создание GitHub Release и загрузка IPA
    - name: Создание GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || format('v{0}', github.run_number) }}
        release_name: Release ${{ github.event.inputs.version || format('v{0}', github.run_number) }}
        draft: false
        prerelease: false

    # Шаг 8: Загрузка IPA файла в Release
    - name: Загрузка IPA в Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}.ipa
        asset_name: ${{ env.PROJECT_NAME }}.ipa
        asset_content_type: application/octet-stream

    # Шаг 9: Загрузка архива в Release (опционально)
    - name: Загрузка архива в Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}.xcarchive
        asset_name: ${{ env.PROJECT_NAME }}.xcarchive
        asset_content_type: application/octet-stream
