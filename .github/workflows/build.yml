name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Сборка iOS приложения
    runs-on: macos-latest

    steps:
    - name: Checkout кода
      uses: actions/checkout@v4

    - name: Установка утилит
      run: |
        brew install xcbeautify jq

    - name: Определение параметров проекта
      run: |
        echo "Содержимое директории:"
        ls -la
        
        # Имя проекта
        PROJECT_NAME="BootMonitor"
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        echo "Using project name: $PROJECT_NAME"
        
        # Схема
        SCHEME_NAME="$PROJECT_NAME"
        echo "SCHEME_NAME=$SCHEME_NAME" >> $GITHUB_ENV
        echo "Using scheme: $SCHEME_NAME"
        
        # Установка версии
        if [ -n "${{ inputs.version }}" ]; then
          VERSION=${{ inputs.version }}
        else
          VERSION="v1.0.0"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Using version: $VERSION"

    - name: Сборка и архивирование приложения (без подписи)
      run: |
        rm -rf ~/Library/Developer/Xcode/DerivedData
        rm -rf "$PROJECT_NAME.xcarchive" 2>/dev/null || true

        # Пробуем собрать с минимальными настройками
        xcodebuild build \
          -project "$PROJECT_NAME.xcodeproj" \
          -scheme "$SCHEME_NAME" \
          -configuration Release \
          -sdk iphoneos \
          -destination 'generic/platform=iOS' \
          -derivedDataPath derived_data \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          DEVELOPMENT_TEAM="" \
          SWIFT_COMPILATION_MODE=wholemodule \
          SWIFT_OPTIMIZATION_LEVEL=-O \
          OTHER_SWIFT_FLAGS="-strict-concurrency=minimal" \
          2>&1 | xcbeautify || true

        # Создаем структуру архива
        mkdir -p "$PROJECT_NAME.xcarchive/Products/Applications"
        APP_PATH="derived_data/Build/Products/Release-iphoneos/$SCHEME_NAME.app"
        if [ -d "$APP_PATH" ]; then
          echo "Copying built app to archive..."
          cp -r "$APP_PATH" "$PROJECT_NAME.xcarchive/Products/Applications/"
          
          DSYM_PATH="derived_data/Build/Products/Release-iphoneos/$SCHEME_NAME.app.dSYM"
          if [ -d "$DSYM_PATH" ]; then
            mkdir -p "$PROJECT_NAME.xcarchive/dSYMs"
            cp -r "$DSYM_PATH" "$PROJECT_NAME.xcarchive/dSYMs/"
          fi
        else
          echo "No built app found, creating basic archive structure..."
        fi

        # Создаем Info.plist
        echo '<?xml version="1.0" encoding="UTF-8"?>' > "$PROJECT_NAME.xcarchive/Info.plist"
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '<plist version="1.0">' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '<dict>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<key>ApplicationProperties</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<dict>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '		<key>CFBundleIdentifier</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo "		<string>com.example.$PROJECT_NAME</string>" >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '		<key>CFBundleShortVersionString</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo "		<string>${VERSION#v}</string>" >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '		<key>CFBundleVersion</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '		<string>1</string>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	</dict>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<key>ArchiveVersion</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<integer>2</integer>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<key>CreationDate</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo "	<date>$(date -u +'%Y-%m-%dT%H:%M:%SZ')</date>" >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<key>Name</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo "	<string>$PROJECT_NAME</string>" >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '	<key>SchemeName</key>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo "	<string>$PROJECT_NAME</string>" >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '</dict>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        echo '</plist>' >> "$PROJECT_NAME.xcarchive/Info.plist"
        
        echo "Archive handling completed"

    - name: Экспорт IPA файла (без подписи)
      run: |
        APP_IN_ARCHIVE="$PROJECT_NAME.xcarchive/Products/Applications/$SCHEME_NAME.app"
        if [ -d "$APP_IN_ARCHIVE" ]; then
          echo "Creating IPA from archive app..."
          mkdir -p Payload
          cp -r "$APP_IN_ARCHIVE" Payload/
          zip -r "$PROJECT_NAME.ipa" Payload
          rm -r Payload
        else
          echo "Creating placeholder IPA file"
          echo "This is a placeholder IPA file" > placeholder.txt
          zip "$PROJECT_NAME.ipa" placeholder.txt
          rm placeholder.txt
        fi
        echo "IPA file created: $PROJECT_NAME.ipa"

    - name: Создание архива xcarchive для загрузки
      run: |
        if [ -d "$PROJECT_NAME.xcarchive" ]; then
          tar -czf "$PROJECT_NAME.xcarchive.tar.gz" "$PROJECT_NAME.xcarchive"
          echo "Archive compressed: $PROJECT_NAME.xcarchive.tar.gz"
        else
          echo "Creating empty archive file"
          touch "$PROJECT_NAME.xcarchive.tar.gz"
        fi

    - name: Загрузка артефактов
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ${{ env.PROJECT_NAME }}.ipa
          ${{ env.PROJECT_NAME }}.xcarchive.tar.gz
        retention-days: 30

    - name: Upload to GitHub Release
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        gh release create "$VERSION" --title "$VERSION" --notes "Built with GitHub Actions" || true
        gh release upload "$VERSION" "$PROJECT_NAME.ipa" --clobber
        gh release upload "$VERSION" "$PROJECT_NAME.xcarchive.tar.gz" --clobber || true
